{"version":3,"sources":["components/Feedback/Section.js","components/Feedback/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","id","name","type","data-action","onClick","Notification","message","defaultProps","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","target","prevState","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","document","querySelector"],"mappings":"uKASeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCcUC,MAjBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKC,UAAU,eAAf,SACGF,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAb,OACX,wBACEA,KAAK,SACLC,cAAaD,EAEbE,QAAS,kBAAMP,EAAgBK,IAJjC,SAMGD,GAHID,SCPA,SAASK,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,6BAAKA,IAGdD,EAAaE,aAAe,CAC1BD,QAAS,qBCJX,IAmCeE,EAnCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,gCACE,4CAEW,IAAVD,EACC,cAACP,EAAD,CAAcC,QAAQ,sBAEtB,+BACE,+BACE,yCACA,+BAAOG,OAET,+BACE,4CACA,+BAAOC,OAET,+BACE,wCACA,+BAAOC,OAET,+BACE,0CACA,+BAAOC,OAET,+BACE,sDACA,iCAAOC,EAAP,kBCzBG,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBN,EADqB,KACfO,EADe,OAEED,mBAAS,GAFX,mBAErBL,EAFqB,KAEZO,EAFY,OAGNF,mBAAS,GAHH,mBAGrBJ,EAHqB,KAGhBO,EAHgB,KAUtBC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GA4BpBC,EAAQO,IAEd,OACE,8BACE,eAAC,EAAD,CAAS1B,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBG,QAxCP,CACd,CAAEI,GAAI,EAAGC,KAAM,OAAQC,KAAM,QAC7B,CAAEF,GAAI,EAAGC,KAAM,UAAWC,KAAM,WAChC,CAAEF,GAAI,EAAGC,KAAM,MAAOC,KAAM,QAqCWL,gBAxBjB,SAAAuB,GACtB,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAAAK,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHJ,GAAW,SAAAI,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHH,GAAO,SAAAG,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,WAUA,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBApCgC,WACtC,IAAMD,EAAQO,IAEd,OAAOG,KAAKC,MAAOd,EAAOG,EAAS,KAiCTY,UCpD9BC,IAASC,OAAO,cAACZ,EAAD,IAASa,SAASC,cAAc,Y","file":"static/js/main.907e9b9e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className=\"group-button\">\n      {options.map(({ id, name, type }) => (\n        <button\n          type=\"button\"\n          data-action={type}\n          key={id}\n          onClick={() => onLeaveFeedback(type)}\n        >\n          {name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport default function Notification({ message }) {\n  return <h3>{message}</h3>;\n}\n\nNotification.defaultProps = {\n  message: 'No feedback given',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Notification from '../Notification/Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div>\n      <h2>Statistics</h2>\n\n      {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <ul>\n          <li>\n            <span>Good:</span>\n            <span>{good}</span>\n          </li>\n          <li>\n            <span>Neutral:</span>\n            <span>{neutral}</span>\n          </li>\n          <li>\n            <span>Bad:</span>\n            <span>{bad}</span>\n          </li>\n          <li>\n            <span>Total:</span>\n            <span>{total}</span>\n          </li>\n          <li>\n            <span>Positive feedback:</span>\n            <span>{positivePercentage} %</span>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import { useState } from 'react';\nimport Section from './components/Feedback/Section';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const options = [\n    { id: 1, name: 'good', type: 'good' },\n    { id: 2, name: 'neutral', type: 'neutral' },\n    { id: 3, name: 'bad', type: 'bad' },\n  ];\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n\n    return Math.round((good / total) * 100);\n  };\n\n  const onLeaveFeedback = target => {\n    switch (target) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const total = countTotalFeedback();\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={onLeaveFeedback} />\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}